"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _kit = await jitiImport("@nuxt/kit");


function exportPages(nuxt, resolve, moduleName) {
  nuxt.hook('pages:extend', (pages) => {
    pages.push({
      name: 'SessionStats',
      path: `/${moduleName}/SessionStats`,
      file: resolve('./pages/SessionStats.vue')
    });
  });
}var _default = exports.default =


(0, _kit.defineNuxtModule)({
  meta: {
    name: 'nuxt-starter-module',
    configKey: 'starterModule'
  },
  setup(options, nuxt) {
    const { resolve } = (0, _kit.createResolver)("file:///E:/workspace/work/Work-2025-XCallAI/nuxtStarterModule/nuxt-starter-module/src/module.ts");

    // Add composables
    (0, _kit.addImports)({
      name: 'useAuth',
      from: resolve('./composables/useAuth')
    });

    // Add components
    (0, _kit.addComponent)({
      name: 'StarterButton',
      filePath: resolve('./components/StarterButton.vue')
    });

    exportPages(nuxt, resolve, 'nuxt-starter-module');
    // Add virtual imports
    nuxt.hook('nitro:config', (nitroConfig) => {
      nitroConfig.virtual = nitroConfig.virtual || {};
      nitroConfig.virtual['#nuxt-starter-module/server'] = `
        export * from '${resolve('./runtime/server/auth')}'
        export * from '${resolve('./runtime/server/types')}'
      `;
    });

    // Add runtime config
    nuxt.options.runtimeConfig.public.starterModule = {
      version: '1.0.0'
    };
  }
}); /* v9-87d2a9e1f080128b */
